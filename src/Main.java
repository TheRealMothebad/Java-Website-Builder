import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Main {
    public static void main(String[] args) {
        //Main obj = new Main();
        File baseDir = new File("HTMLPre/bases");
        File[] filesInDir = baseDir.listFiles(file -> file.getName().endsWith(".html"));
        if (filesInDir != null) {
            for (File file : filesInDir) {
                String completedFile = processFile(file);
                try {
                    PrintWriter out = new PrintWriter("output/" + file.getName());
                    out.print(completedFile);
                    out.close();
                } catch (FileNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        else {
            System.out.println("There aint no files there!");
        }
    }

    public static String replaceStub(String text, String stub) {
        File stubFile = new File("HTMLPre/stubs/" + stub + ".html");
        return text.replace("<!-- {{" + stub + "}} -->", processFile(stubFile));
    }

    public static String processFile(File file) {
        System.out.println("PRoccessing " + file);
        String fileText;
        try {
            //System.out.println(file);
            fileText = Files.readString(file.toPath());
            ArrayList<String> stubNames = findMatches(Files.readString(file.toPath()));
            for (String stubName : stubNames) {
                if (stubName.startsWith("||navBuilder||")) {
                    //navbuilder need base file name, nav file text
                    fileText = navBuilder(fileText, stubName.substring(14), file);
                }
                else {
                    fileText = replaceStub(fileText, stubName);
                }
                System.out.println("stub: " + stubName + " : " + fileText);
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        System.out.println("end of proccess file is: " + fileText);
        return fileText;
    }

    public static String navBuilder(String fileText, String stubName, File baseFile) {
        String insertString = "";
        File baseDir = new File("HTMLPre/bases");
        File[] filesInDir = baseDir.listFiles(file -> file.getName().endsWith(".html"));
        if (filesInDir != null) {
            for (File file : filesInDir) {
                String name = file.getName();
                String prettyName = "";
                try {
                    prettyName = grabName(Files.readString(file.toPath()));
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                if (file.getName().equals(baseFile.getName())) {

                }
                else {

                }
            }
        }
        else {
            System.out.println("There aint no files there!");
        }
        return insertString;
    }

                //partially generated by https://regex-generator.olafneumann.org/
    //<!-- {{foundText}} -->
    public static ArrayList<String> findMatches(final String input) {
        // Compile regular expression
        final Pattern pattern = Pattern.compile("<!--\\s+\\{\\{([^}]*)\\}\\}\\s-->", Pattern.CASE_INSENSITIVE);
        // Match regex against input
        final Matcher matcher = pattern.matcher(input);
        // Use results...
        ArrayList<String> matchedStrings = new ArrayList<>();
        while (matcher.find()) {
            matchedStrings.add(matcher.group(1));
        }

        return matchedStrings;
    }

    public static String grabName(String fileText) {
        final Pattern pattern = Pattern.compile("<!--\\s+\\[\\[([^]]*)\\]\\]\\|/d\\|\\s-->", Pattern.CASE_INSENSITIVE);
        // Match regex against input
        final Matcher matcher = pattern.matcher(fileText);
        // Use results...
        matcher.find();
        return matcher.group(1);
    }

    public static String grabOrder(String fileText) {
        final Pattern pattern = Pattern.compile("\n" +
                "<!--\\s\\|\\|\\d\\|\\|\\s-->\n", Pattern.CASE_INSENSITIVE);
        // Match regex against input
        final Matcher matcher = pattern.matcher(fileText);
        // Use results...
        matcher.find();
        return matcher.group(1);
    }
}